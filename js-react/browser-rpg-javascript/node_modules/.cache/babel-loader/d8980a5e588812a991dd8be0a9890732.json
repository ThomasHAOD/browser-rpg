{"ast":null,"code":"import _objectSpread from \"/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/src/Game/GameContainer.js\";\nimport React, { Component, Fragment } from 'react';\nimport StartScreenContainer from '../Containers/StartScreenContainer';\nimport NewCharacterContainer from '../Containers/NewCharacterContainer';\nimport PlayerSelectCharacterContainer from '../Containers/PlayerSelectCharacterContainer';\nimport BattleContainer from '../Containers/BattleContainer';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport EndGameContainer from '../Containers/EndGameContainer';\nimport NewPlayerContainer from '../Containers/NewPlayerContainer';\nimport HomeScreenButton from '../Components/HomeScreenButton';\n\nclass GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      currentPlayer: {\n        name: ''\n      },\n      currentCharacter: null,\n      currentEnemy: {\n        alive: true\n      },\n      newCharacterSpriteID: 0,\n      createdNewPlayer: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCurrentPlayerChange = this.handleCurrentPlayerChange.bind(this);\n    this.handleNewPlayerForm = this.handleNewPlayerForm.bind(this);\n    this.setCurrentPlayer = this.setCurrentPlayer.bind(this);\n    this.playerAttacksEnemy = this.playerAttacksEnemy.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const url = 'http://localhost:8080/avatars';\n    const newCharacter = {\n      name: event.target.name.value,\n      player: this.state.currentPlayer._links.player.href\n    };\n    console.log(newCharacter);\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(newCharacter),\n      headers: headers\n    });\n  }\n\n  handleNewPlayerForm(event) {\n    event.preventDefault();\n    const url = 'http://localhost:8080/players';\n    const newPlayer = {\n      name: event.target.name.value\n    };\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(newPlayer),\n      headers: headers\n    });\n    this.setState({\n      createdNewPlayer: true\n    });\n  }\n\n  setCurrentPlayer(index) {\n    this.setState({\n      currentPlayer: this.state.players[index]\n    });\n  }\n\n  handleCurrentPlayerChange(event) {\n    const playerIndex = event.target.value - 1;\n    console.log(playerIndex);\n    this.setState({\n      currentPlayer: this.state.players[playerIndex]\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.createdNewPlayer === true) {\n      fetch(\"http://localhost:8080/players\").then(res => res.json()).then(existingPlayers => this.setState({\n        players: existingPlayers._embedded.players\n      })).then(err => console.error);\n      this.setState({\n        createdNewPlayer: false\n      });\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/players\").then(res => res.json()).then(existingPlayers => this.setState({\n      players: existingPlayers._embedded.players\n    })).then(err => console.error);\n    fetch(\"http://localhost:8080/avatars/1\").then(res => res.json()).then(avatar => this.setState({\n      currentCharacter: avatar\n    })).then(err => console.error);\n    fetch(\"http://localhost:8080/enemies/1\").then(res => res.json()).then(enemy => this.setState({\n      currentEnemy: enemy\n    })).then(err => console.error);\n  }\n\n  playerAttacksEnemy() {\n    const power = this.state.currentCharacter.power;\n\n    if (!(this.state.currentEnemy.currentHP - power <= 0)) {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.currentHP -= power;\n        return {\n          currentEnemy\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.alive = false;\n        return {\n          currentEnemy\n        };\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: StartScreenContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/select-player\",\n      render: props => React.createElement(NewPlayerContainer, Object.assign({}, props, {\n        players: this.state.players,\n        currentPlayer: this.state.currentPlayer,\n        changePlayer: this.handleCurrentPlayerChange,\n        handleSubmit: this.handleNewPlayerForm,\n        handleNameChange: this.handlePlayerNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/new-character\",\n      render: props => React.createElement(NewCharacterContainer, Object.assign({}, props, {\n        currentPlayer: this.state.currentPlayer,\n        spriteID: this.state.newCharacterSpriteID,\n        handleClick: this.handleClick,\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/select-character-create-character\",\n      component: PlayerSelectCharacterContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/battle\",\n      render: props => React.createElement(BattleContainer, Object.assign({}, props, {\n        currentPlayer: this.state.currentPlayer,\n        currentCharacter: this.state.currentCharacter,\n        currentEnemy: this.state.currentEnemy,\n        playerAttacksEnemy: this.playerAttacksEnemy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      component: HomeScreenButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/endgame\",\n      component: EndGameContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/src/Game/GameContainer.js"],"names":["React","Component","Fragment","StartScreenContainer","NewCharacterContainer","PlayerSelectCharacterContainer","BattleContainer","BrowserRouter","Router","Route","Redirect","Switch","EndGameContainer","NewPlayerContainer","HomeScreenButton","GameContainer","constructor","props","state","players","currentPlayer","name","currentCharacter","currentEnemy","alive","newCharacterSpriteID","createdNewPlayer","handleSubmit","bind","handleCurrentPlayerChange","handleNewPlayerForm","setCurrentPlayer","playerAttacksEnemy","event","preventDefault","url","newCharacter","target","value","player","_links","href","console","log","headers","fetch","method","body","JSON","stringify","newPlayer","setState","index","playerIndex","componentDidUpdate","prevProps","prevState","then","res","json","existingPlayers","_embedded","err","error","componentDidMount","avatar","enemy","power","currentHP","render","handlePlayerNameChange","handleClick"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport StartScreenContainer from '../Containers/StartScreenContainer'\nimport NewCharacterContainer from '../Containers/NewCharacterContainer'\nimport PlayerSelectCharacterContainer from '../Containers/PlayerSelectCharacterContainer'\nimport BattleContainer from '../Containers/BattleContainer'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport EndGameContainer from '../Containers/EndGameContainer';\nimport NewPlayerContainer from '../Containers/NewPlayerContainer';\nimport HomeScreenButton from '../Components/HomeScreenButton';\n\n\nclass GameContainer extends Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            players: [],\n            currentPlayer: {name:''},\n            currentCharacter: null,\n            currentEnemy: {alive: true},\n            newCharacterSpriteID: 0,\n            createdNewPlayer: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleCurrentPlayerChange = this.handleCurrentPlayerChange.bind(this)\n        this.handleNewPlayerForm = this.handleNewPlayerForm.bind(this)\n        this.setCurrentPlayer = this.setCurrentPlayer.bind(this)\n        this.playerAttacksEnemy = this.playerAttacksEnemy.bind(this)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const url = 'http://localhost:8080/avatars'\n        const newCharacter = { name: event.target.name.value, player: this.state.currentPlayer._links.player.href }\n        console.log(newCharacter);\n        \n        const headers = { 'Content-Type': 'application/json' }\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(newCharacter),\n            headers: headers\n        })\n    }\n\n    handleNewPlayerForm(event) {\n        event.preventDefault();\n        const url = 'http://localhost:8080/players'\n        const newPlayer = { name: event.target.name.value }\n        const headers = { 'Content-Type': 'application/json' }\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(newPlayer),\n            headers: headers\n        })\n        this.setState({createdNewPlayer: true})\n    }\n\n    setCurrentPlayer(index){\n        this.setState({ currentPlayer: this.state.players[index] })\n    }\n\n    handleCurrentPlayerChange(event){\n        const playerIndex = event.target.value - 1 ;\n        console.log(playerIndex)\n        this.setState({currentPlayer: this.state.players[playerIndex]})\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.createdNewPlayer === true){\n            fetch(\"http://localhost:8080/players\")\n                .then(res => res.json())\n                .then(existingPlayers => this.setState({ players: existingPlayers._embedded.players }))\n                .then(err => console.error)\n                this.setState({createdNewPlayer:false})\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"http://localhost:8080/players\")\n            .then(res => res.json())\n            .then(existingPlayers => this.setState({ players: existingPlayers._embedded.players }))\n            .then(err => console.error)\n\n        fetch(\"http://localhost:8080/avatars/1\")\n            .then(res => res.json())\n            .then(avatar => this.setState({ currentCharacter: avatar }))\n            .then(err => console.error)\n\n        fetch(\"http://localhost:8080/enemies/1\")\n            .then(res => res.json())\n            .then(enemy => this.setState({ currentEnemy: enemy }))\n            .then(err => console.error)\n    }\n\n    playerAttacksEnemy(){\n        const power = this.state.currentCharacter.power;\n        if(!(this.state.currentEnemy.currentHP - power <= 0)){\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy }\n                currentEnemy.currentHP -= power;                  \n                return { currentEnemy };\n            })\n        }else {\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy}\n                currentEnemy.alive = false;\n                return {currentEnemy};\n            })\n        }\n    }\n\n    render(){\n\n        return(\n            <Router>\n                <Fragment>\n                    <Route exact path=\"/\" component={StartScreenContainer} />\n                    <Route exact path=\"/select-player\" \n                        render={(props) => <NewPlayerContainer {...props} \n                        players={this.state.players} \n                        currentPlayer={this.state.currentPlayer}\n                        changePlayer={this.handleCurrentPlayerChange} \n                        handleSubmit={this.handleNewPlayerForm}\n                        handleNameChange={this.handlePlayerNameChange}\n                        />}\n                        />\n                    <Route exact path=\"/new-character\" \n                        render={(props) => \n                        <NewCharacterContainer {...props} \n                            currentPlayer={this.state.currentPlayer}\n                            \n                            spriteID={this.state.newCharacterSpriteID} \n                            handleClick={this.handleClick} \n                            handleSubmit={this.handleSubmit}\n                        />}\n                        />\n                    <Route exact path=\"/select-character-create-character\" component={PlayerSelectCharacterContainer} />\n                    <Route exact path=\"/battle\" \n                        render={(props) => <BattleContainer {...props}\n                        currentPlayer={this.state.currentPlayer}\n                        currentCharacter={this.state.currentCharacter} \n                        currentEnemy={this.state.currentEnemy}\n                        playerAttacksEnemy={this.playerAttacksEnemy}\n                        />}\n                        />\n                    <Route path=\"/\"component={HomeScreenButton} />   \n                    <Route exact path=\"/endgame\"component={EndGameContainer} />\n                </Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default GameContainer"]},"metadata":{},"sourceType":"module"}