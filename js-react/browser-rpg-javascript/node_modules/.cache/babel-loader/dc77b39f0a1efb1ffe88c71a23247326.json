{"ast":null,"code":"import _objectSpread from \"/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/src/Game/GameContainer.js\";\nimport React, { Component, Fragment } from 'react';\nimport StartScreenContainer from '../Containers/StartScreenContainer';\nimport NewCharacterContainer from '../Containers/NewCharacterContainer';\nimport PlayerSelectCharacterContainer from '../Containers/PlayerSelectCharacterContainer';\nimport BattleContainer from '../Containers/BattleContainer';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport EndGameContainer from '../Containers/EndGameContainer';\nimport NewPlayerContainer from '../Containers/NewPlayerContainer';\nimport HomeScreenButton from '../Components/HomeScreenButton';\nimport CurrentPlayerCharacter from '../Components/CurrentPlayerCharacter';\n\nclass GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      currentPlayer: {\n        name: ''\n      },\n      currentCharacter: null,\n      currentEnemy: {\n        alive: true\n      },\n      newCharacterSpriteID: 0,\n      createdNewPlayer: false,\n      playerIsDefending: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCurrentPlayerChange = this.handleCurrentPlayerChange.bind(this);\n    this.handleNewPlayerForm = this.handleNewPlayerForm.bind(this);\n    this.setCurrentPlayer = this.setCurrentPlayer.bind(this);\n    this.playerAttacksEnemy = this.playerAttacksEnemy.bind(this);\n    this.enemyAttacksPlayer = this.enemyAttacksPlayer.bind(this);\n    this.playerDefends = this.playerDefends.bind(this);\n    this.resetEnemy = this.resetEnemy.bind(this);\n    this.accumulateScore = this.accumulateScore.bind(this);\n    this.setCurrentHPCharacter = this.setCurrentHPCharacter.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"posting\");\n    const url = 'http://localhost:8080/avatars';\n    const newCharacter = {\n      name: event.target.name.value,\n      maxHP: event.target.hp.value,\n      currentHP: event.target.hp.value,\n      power: event.target.power.value,\n      spriteID: event.target.spriteID.value,\n      alive: true,\n      score: 0,\n      player: this.state.currentPlayer._links.player.href\n    };\n    this.setState({\n      currentCharacter: newCharacter\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(newCharacter),\n      headers: headers\n    });\n  }\n\n  handleNewPlayerForm(event) {\n    event.preventDefault();\n    const url = 'http://localhost:8080/players';\n    const newPlayer = {\n      name: event.target.name.value\n    };\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(newPlayer),\n      headers: headers\n    });\n    this.setState({\n      createdNewPlayer: true\n    });\n  }\n\n  setCurrentPlayer(index) {\n    this.setState({\n      currentPlayer: this.state.players[index]\n    });\n  }\n\n  handleCurrentPlayerChange(event) {\n    const playerIndex = event.target.value - 1;\n    console.log(playerIndex);\n    this.setState({\n      currentPlayer: this.state.players[playerIndex]\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.createdNewPlayer === true) {\n      fetch(\"http://localhost:8080/players\").then(res => res.json()).then(existingPlayers => this.setState({\n        players: existingPlayers._embedded.players\n      })).then(err => console.error);\n      this.setState({\n        createdNewPlayer: false\n      });\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/players\").then(res => res.json()).then(existingPlayers => this.setState({\n      players: existingPlayers._embedded.players\n    })).then(err => console.error);\n    fetch(\"http://localhost:8080/avatars/1\").then(res => res.json()).then(avatar => this.setState({\n      currentCharacter: avatar\n    })).then(err => console.error);\n    fetch(\"http://localhost:8080/enemies/1\").then(res => res.json()).then(enemy => this.setState({\n      currentEnemy: enemy\n    })).then(err => console.error);\n  }\n\n  playerAttacksEnemy() {\n    this.setState({\n      playerIsDefending: false\n    });\n    const power = this.state.currentCharacter.power;\n\n    if (!(this.state.currentEnemy.currentHP - power <= 0)) {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.currentHP -= power;\n        return {\n          currentEnemy\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.alive = false;\n        return {\n          currentEnemy\n        };\n      });\n    }\n  }\n\n  resetEnemy() {\n    this.setState(prevState => {\n      const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n      currentEnemy.currentHP = currentEnemy.maxHP;\n      currentEnemy.alive = true;\n      return {\n        currentEnemy\n      };\n    });\n  }\n\n  setCurrentHPCharacter() {\n    this.setState(prevState => {\n      const currentCharacter = _objectSpread({}, prevState.currentCharacter);\n\n      currentCharacter.currentHP = 0;\n      return {\n        currentCharacter\n      };\n    });\n  }\n\n  accumulateScore() {\n    this.setState(prevState => {\n      const currentCharacter = _objectSpread({}, prevState.currentCharacter);\n\n      currentCharacter.score += 500;\n      return {\n        currentCharacter\n      };\n    });\n  }\n\n  enemyAttacksPlayer() {\n    let power = 0;\n\n    if (this.state.currentEnemy.currentHP <= 70) {\n      power = this.state.currentEnemy.power + 30;\n    }\n\n    if (!this.state.playerIsDefending) {\n      power = this.state.currentEnemy.power;\n    } else {\n      power = this.state.currentEnemy.power - 20;\n    }\n\n    if (!(this.state.currentCharacter.currentHP - power <= 0)) {\n      this.setState(prevState => {\n        const currentCharacter = _objectSpread({}, prevState.currentCharacter);\n\n        currentCharacter.currentHP -= power;\n        return {\n          currentCharacter\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const currentCharacter = _objectSpread({}, prevState.currentCharacter);\n\n        currentCharacter.alive = false;\n        return {\n          currentCharacter\n        };\n      });\n    }\n  }\n\n  playerDefends() {\n    this.setState({\n      playerIsDefending: true\n    });\n    const power = this.state.currentCharacter.power;\n\n    if (!(this.state.currentEnemy.currentHP - (power - 30) <= 0)) {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.currentHP -= power - 30;\n        return {\n          currentEnemy\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        const currentEnemy = _objectSpread({}, prevState.currentEnemy);\n\n        currentEnemy.alive = false;\n        return {\n          currentEnemy\n        };\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: StartScreenContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/select-player\",\n      render: props => React.createElement(NewPlayerContainer, Object.assign({}, props, {\n        players: this.state.players,\n        currentPlayer: this.state.currentPlayer,\n        changePlayer: this.handleCurrentPlayerChange,\n        handleSubmit: this.handleNewPlayerForm,\n        handleNameChange: this.handlePlayerNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/new-character\",\n      render: props => React.createElement(NewCharacterContainer, Object.assign({}, props, {\n        currentPlayer: this.state.currentPlayer,\n        spriteID: this.state.newCharacterSpriteID,\n        handleClick: this.handleClick,\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/select-character-create-character\",\n      component: PlayerSelectCharacterContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/battle\",\n      render: props => React.createElement(BattleContainer, Object.assign({}, props, {\n        currentPlayer: this.state.currentPlayer,\n        currentCharacter: this.state.currentCharacter,\n        currentEnemy: this.state.currentEnemy,\n        resetEnemy: this.resetEnemy,\n        accumulateScore: this.accumulateScore,\n        setCurrentHPCharacter: this.setCurrentHPCharacter,\n        playerAttacksEnemy: this.playerAttacksEnemy,\n        enemyAttacksPlayer: this.enemyAttacksPlayer,\n        playerDefends: this.playerDefends,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      component: HomeScreenButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/endgame\",\n      render: props => React.createElement(EndGameContainer, Object.assign({}, props, {\n        currentCharacter: this.state.currentCharacter,\n        currentPlayer: this.state.currentPlayer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(CurrentPlayerCharacter, {\n      currentPlayer: this.state.currentPlayer,\n      currentCharacter: this.state.currentCharacter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/user/codeclan_work/Projects/browser-rpg/js-react/browser-rpg-javascript/src/Game/GameContainer.js"],"names":["React","Component","Fragment","StartScreenContainer","NewCharacterContainer","PlayerSelectCharacterContainer","BattleContainer","BrowserRouter","Router","Route","Redirect","Switch","EndGameContainer","NewPlayerContainer","HomeScreenButton","CurrentPlayerCharacter","GameContainer","constructor","props","state","players","currentPlayer","name","currentCharacter","currentEnemy","alive","newCharacterSpriteID","createdNewPlayer","playerIsDefending","handleSubmit","bind","handleCurrentPlayerChange","handleNewPlayerForm","setCurrentPlayer","playerAttacksEnemy","enemyAttacksPlayer","playerDefends","resetEnemy","accumulateScore","setCurrentHPCharacter","event","preventDefault","console","log","url","newCharacter","target","value","maxHP","hp","currentHP","power","spriteID","score","player","_links","href","setState","headers","fetch","method","body","JSON","stringify","newPlayer","index","playerIndex","componentDidUpdate","prevProps","prevState","then","res","json","existingPlayers","_embedded","err","error","componentDidMount","avatar","enemy","render","handlePlayerNameChange","handleClick"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport StartScreenContainer from '../Containers/StartScreenContainer'\nimport NewCharacterContainer from '../Containers/NewCharacterContainer'\nimport PlayerSelectCharacterContainer from '../Containers/PlayerSelectCharacterContainer'\nimport BattleContainer from '../Containers/BattleContainer'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport EndGameContainer from '../Containers/EndGameContainer';\nimport NewPlayerContainer from '../Containers/NewPlayerContainer';\nimport HomeScreenButton from '../Components/HomeScreenButton';\nimport CurrentPlayerCharacter from '../Components/CurrentPlayerCharacter';\n\n\nclass GameContainer extends Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            players: [],\n            currentPlayer: {name:''},\n            currentCharacter: null,\n            currentEnemy: {alive: true},\n            newCharacterSpriteID: 0,\n            createdNewPlayer: false,\n            playerIsDefending: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleCurrentPlayerChange = this.handleCurrentPlayerChange.bind(this)\n        this.handleNewPlayerForm = this.handleNewPlayerForm.bind(this)\n        this.setCurrentPlayer = this.setCurrentPlayer.bind(this)\n        this.playerAttacksEnemy = this.playerAttacksEnemy.bind(this)\n        this.enemyAttacksPlayer = this.enemyAttacksPlayer.bind(this)\n        this.playerDefends = this.playerDefends.bind(this)\n        this.resetEnemy = this.resetEnemy.bind(this)\n        this.accumulateScore = this.accumulateScore.bind(this)\n        this.setCurrentHPCharacter = this.setCurrentHPCharacter.bind(this)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"posting\")\n        const url = 'http://localhost:8080/avatars'\n        const newCharacter = { name: event.target.name.value, maxHP: event.target.hp.value, currentHP: event.target.hp.value, power: event.target.power.value, spriteID: event.target.spriteID.value, alive: true, score: 0, player: this.state.currentPlayer._links.player.href }\n        this.setState({currentCharacter: newCharacter})\n        const headers = { 'Content-Type': 'application/json' }\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(newCharacter),\n            headers: headers\n        })\n    }\n\n    handleNewPlayerForm(event) {\n        event.preventDefault();\n        const url = 'http://localhost:8080/players'\n        const newPlayer = { name: event.target.name.value }\n        const headers = { 'Content-Type': 'application/json' }\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(newPlayer),\n            headers: headers\n        })\n        this.setState({createdNewPlayer: true})\n    }\n\n    setCurrentPlayer(index){\n        this.setState({ currentPlayer: this.state.players[index] })\n    }\n\n    handleCurrentPlayerChange(event){\n        const playerIndex = event.target.value - 1 ;\n        console.log(playerIndex)\n        this.setState({currentPlayer: this.state.players[playerIndex]})\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.createdNewPlayer === true){\n            fetch(\"http://localhost:8080/players\")\n                .then(res => res.json())\n                .then(existingPlayers => this.setState({ players: existingPlayers._embedded.players }))\n                .then(err => console.error)\n                this.setState({createdNewPlayer:false})\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"http://localhost:8080/players\")\n            .then(res => res.json())\n            .then(existingPlayers => this.setState({ players: existingPlayers._embedded.players }))\n            .then(err => console.error)\n\n        fetch(\"http://localhost:8080/avatars/1\")\n            .then(res => res.json())\n            .then(avatar => this.setState({ currentCharacter: avatar }))\n            .then(err => console.error)\n\n        fetch(\"http://localhost:8080/enemies/1\")\n            .then(res => res.json())\n            .then(enemy => this.setState({ currentEnemy: enemy }))\n            .then(err => console.error)\n    }\n\n    playerAttacksEnemy(){\n        this.setState({ playerIsDefending: false })\n       \n        const power = this.state.currentCharacter.power;\n        if(!(this.state.currentEnemy.currentHP - power <= 0)){\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy }\n                currentEnemy.currentHP -= power;                             \n                return { currentEnemy };\n            })\n        }else {\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy}\n                currentEnemy.alive = false;\n                return {currentEnemy};\n            })\n        }\n    }\n\n    resetEnemy(){\n        this.setState(prevState => {\n            const currentEnemy = {...prevState.currentEnemy}\n            currentEnemy.currentHP = currentEnemy.maxHP\n            currentEnemy.alive = true\n            return {currentEnemy}\n        })\n    }\n\n    setCurrentHPCharacter(){\n        this.setState(prevState => {\n            const currentCharacter= {...prevState.currentCharacter}\n            currentCharacter.currentHP = 0\n            return {currentCharacter}\n        })\n    }\n\n    accumulateScore(){\n        this.setState(prevState => {\n            const currentCharacter = {...prevState.currentCharacter}\n            currentCharacter.score += 500\n            return {currentCharacter}\n        })\n    }\n\n    enemyAttacksPlayer(){\n        let power= 0;\n        if(this.state.currentEnemy.currentHP <= 70){\n            power = this.state.currentEnemy.power + 30;\n        }\n\n        if(!this.state.playerIsDefending){\n            power = this.state.currentEnemy.power;\n        } else{\n            power = this.state.currentEnemy.power - 20;\n        }\n\n        if (!(this.state.currentCharacter.currentHP - power <= 0)) {\n            this.setState(prevState => {\n                const currentCharacter = { ...prevState.currentCharacter }\n                currentCharacter.currentHP -= power;\n                return { currentCharacter };\n            })\n        } else {\n            this.setState(prevState => {\n                const currentCharacter = { ...prevState.currentCharacter }\n                currentCharacter.alive = false;\n                return { currentCharacter };\n            })\n        }\n    }\n\n    playerDefends(){\n        this.setState({playerIsDefending: true})\n\n        const power = this.state.currentCharacter.power;\n        if (!(this.state.currentEnemy.currentHP - (power - 30) <= 0)) {\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy }\n                currentEnemy.currentHP -= (power - 30);\n                return { currentEnemy };\n            })\n        } else {\n            this.setState(prevState => {\n                const currentEnemy = { ...prevState.currentEnemy }\n                currentEnemy.alive = false;\n                return { currentEnemy };\n            })\n        }\n    }\n\n    render(){\n\n        return(\n            <Router>\n                <Fragment>\n                    <Route exact path=\"/\" component={StartScreenContainer} />\n                    <Route exact path=\"/select-player\" \n                        render={(props) => <NewPlayerContainer {...props} \n                        players={this.state.players} \n                        currentPlayer={this.state.currentPlayer}\n                        changePlayer={this.handleCurrentPlayerChange} \n                        handleSubmit={this.handleNewPlayerForm}\n                        handleNameChange={this.handlePlayerNameChange}\n                        />}\n                        />\n                    <Route exact path=\"/new-character\" \n                        render={(props) => \n                        <NewCharacterContainer {...props} \n                            currentPlayer={this.state.currentPlayer}\n                            \n                            spriteID={this.state.newCharacterSpriteID} \n                            handleClick={this.handleClick} \n                            handleSubmit={this.handleSubmit}\n                        />}\n                        />\n                    <Route exact path=\"/select-character-create-character\" component={PlayerSelectCharacterContainer} />\n                    <Route exact path=\"/battle\" \n                        render={(props) => <BattleContainer {...props}\n                        currentPlayer={this.state.currentPlayer}\n                        currentCharacter={this.state.currentCharacter} \n                        currentEnemy={this.state.currentEnemy}\n                        resetEnemy={this.resetEnemy}\n                        accumulateScore={this.accumulateScore}\n                        setCurrentHPCharacter={this.setCurrentHPCharacter}\n                        playerAttacksEnemy={this.playerAttacksEnemy}\n                        enemyAttacksPlayer={this.enemyAttacksPlayer}\n                        playerDefends={this.playerDefends}\n                        />}\n                        />\n                    <Route path=\"/\"component={HomeScreenButton} />   \n                    <Route exact path=\"/endgame\"render={(props) => <EndGameContainer {...props}\n                    currentCharacter={this.state.currentCharacter}\n                    currentPlayer={this.state.currentPlayer}\n                    />} \n                    />\n                    <CurrentPlayerCharacter \n                    currentPlayer={this.state.currentPlayer}\n                    currentCharacter={this.state.currentCharacter}\n                    />\n                </Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default GameContainer"]},"metadata":{},"sourceType":"module"}